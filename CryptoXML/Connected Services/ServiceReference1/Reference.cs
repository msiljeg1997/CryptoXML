//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ServiceModel;
using System.Text;

namespace ServiceReference1
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "urn:microsoft-dynamics-schemas/codeunit/MainServisNETCore", ConfigurationName = "ServiceReference1.MainServisNETCore_Port")]
    public interface MainServisNETCore_Port
    {

        [System.ServiceModel.OperationContractAttribute(Action = "urn:microsoft-dynamics-schemas/codeunit/MainServisNETCore:ExecuteMethod", ReplyAction = "*")]
        System.Threading.Tasks.Task<ServiceReference1.ExecuteMethod_Result> ExecuteMethodAsync(ServiceReference1.ExecuteMethod request);
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class ExecuteMethod
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Name = "ExecuteMethod", Namespace = "urn:microsoft-dynamics-schemas/codeunit/MainServisNETCore", Order = 0)]
        public ServiceReference1.ExecuteMethodBody Body;

        public ExecuteMethod()
        {
        }

        public ExecuteMethod(ServiceReference1.ExecuteMethodBody Body)
        {
            this.Body = Body;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace = "urn:microsoft-dynamics-schemas/codeunit/MainServisNETCore")]
    public partial class ExecuteMethodBody
    {

        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue = false, Order = 0)]
        public string dataStream;

        public ExecuteMethodBody()
        {
        }

        public ExecuteMethodBody(string dataStream)
        {
            this.dataStream = dataStream;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class ExecuteMethod_Result
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Name = "ExecuteMethod_Result", Namespace = "urn:microsoft-dynamics-schemas/codeunit/MainServisNETCore", Order = 0)]
        public ServiceReference1.ExecuteMethod_ResultBody Body;

        public ExecuteMethod_Result()
        {
        }

        public ExecuteMethod_Result(ServiceReference1.ExecuteMethod_ResultBody Body)
        {
            this.Body = Body;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace = "urn:microsoft-dynamics-schemas/codeunit/MainServisNETCore")]
    public partial class ExecuteMethod_ResultBody
    {

        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue = false, Order = 0)]
        public string dataStream;

        public ExecuteMethod_ResultBody()
        {
        }

        public ExecuteMethod_ResultBody(string dataStream)
        {
            this.dataStream = dataStream;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface MainServisNETCore_PortChannel : ServiceReference1.MainServisNETCore_Port, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class MainServisNETCore_PortClient : System.ServiceModel.ClientBase<ServiceReference1.MainServisNETCore_Port>, ServiceReference1.MainServisNETCore_Port
    {

        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        public MainServisNETCore_PortClient() :
                base(MainServisNETCore_PortClient.GetDefaultBinding(), MainServisNETCore_PortClient.GetDefaultEndpointAddress())
        {
            this.ChannelFactory.Credentials.Windows.ClientCredential = new System.Net.NetworkCredential("matijas", "Ivan321!");

            this.Endpoint.Name = EndpointConfiguration.MainServisNETCore_Port.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public MainServisNETCore_PortClient(EndpointConfiguration endpointConfiguration) :
                base(MainServisNETCore_PortClient.GetBindingForEndpoint(endpointConfiguration), MainServisNETCore_PortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public MainServisNETCore_PortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
                base(MainServisNETCore_PortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public MainServisNETCore_PortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                base(MainServisNETCore_PortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public MainServisNETCore_PortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.ExecuteMethod_Result> ServiceReference1.MainServisNETCore_Port.ExecuteMethodAsync(ServiceReference1.ExecuteMethod request)
        {
            return base.Channel.ExecuteMethodAsync(request);
        }

        public System.Threading.Tasks.Task<ServiceReference1.ExecuteMethod_Result> ExecuteMethodAsync(string dataStream)
        {
            ServiceReference1.ExecuteMethod inValue = new ServiceReference1.ExecuteMethod();
            inValue.Body = new ServiceReference1.ExecuteMethodBody();
            inValue.Body.dataStream = dataStream;
            return ((ServiceReference1.MainServisNETCore_Port)(this)).ExecuteMethodAsync(inValue);
        }

        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }

        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MainServisNETCore_Port))
            {
                BasicHttpBinding httpBinding = new BasicHttpBinding();
                httpBinding.Security.Transport.ClientCredentialType = HttpClientCredentialType.Ntlm;
                httpBinding.Security.Transport.ProxyCredentialType = HttpProxyCredentialType.None;
                httpBinding.Security.Message.ClientCredentialType = BasicHttpMessageCredentialType.UserName;
                httpBinding.TextEncoding = Encoding.UTF8;
                httpBinding.Security.Mode = BasicHttpSecurityMode.TransportCredentialOnly;
                httpBinding.SendTimeout = new System.TimeSpan(0, 5, 0);
                httpBinding.MaxReceivedMessageSize = 8388608 * 32;

                return httpBinding;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MainServisNETCore_Port))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.150.25:7547/BC230/WS/CRONUS International Ltd./Codeunit/MainServis" +
                        "NETCore");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MainServisNETCore_PortClient.GetBindingForEndpoint(EndpointConfiguration.MainServisNETCore_Port);
        }

        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MainServisNETCore_PortClient.GetEndpointAddress(EndpointConfiguration.MainServisNETCore_Port);
        }

        public enum EndpointConfiguration
        {

            MainServisNETCore_Port,
        }
    }
}
